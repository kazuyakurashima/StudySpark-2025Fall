# Next.js App Router ベストプラクティス

このプロジェクトでは、Next.jsのApp Router、サーバーコンポーネント、Server Actions、そしてDAL（Data Access Layer）の活用を推奨します。以下にベストプラクティスをまとめます。

## 1. App Routerの構成
- `app/` ディレクトリを利用し、ページやレイアウトを明確に分離する。
- ルートごとに`layout.tsx`や`page.tsx`を配置し、再利用性と保守性を高める。
- ルーティングはファイルベースで管理し、動的ルートやキャッチオールルートも活用する。

## 2. サーバーコンポーネントの活用
- デフォルトでサーバーコンポーネント（`.tsx`）を利用し、クライアントでのみ必要な場合に`'use client'`ディレクティブを明示する。
- サーバーコンポーネントでは、直接DBアクセスや認証情報の取得など、サーバーサイドの処理を記述する。
- クライアントコンポーネントはUIのインタラクションや状態管理に限定する。

## 3. Server Actionsの利用
- フォーム送信やデータ更新などの副作用処理は、Server Actionsを活用してサーバーサイドで完結させる。
- Server Actionsは型安全に実装し、バリデーションやエラーハンドリングもサーバー側で行う。
- Server Actionsは`app/`配下のコンポーネントやAPIハンドラから呼び出す。

## 4. DAL（Data Access Layer）の設計
- DBや外部APIへのアクセスはDALに集約し、ビジネスロジックと分離する。
- DALは`lib/`や`data/`ディレクトリに配置し、再利用性・テスト容易性を高める。
- DALは型定義を明確にし、エラー処理も一元化する。
- サーバーコンポーネントやServer ActionsからDALを呼び出すことで、データ取得・更新を一元管理する。

## 5. その他
- 型安全性を重視し、TypeScriptを徹底活用する。
- 環境変数やシークレットは`.env`やNext.jsの`process.env`経由で安全に管理する。
- コード分割やキャッシュ戦略もApp Routerの機能を活用して最適化する。

---
このルールはNext.js App Routerを用いた開発の指針として活用してください。
description:
globs:
alwaysApply: false
---
